{- | Base types & functions for PCRE -}

module PCRE.Base
  ( REParsecable(..), compRE )
where

-- base --------------------------------

import Data.Bifunctor  ( first )

-- base-unicode-symbols ----------------

import Data.Function.Unicode    ( (‚àò) )

-- lens --------------------------------

import Control.Lens.Review  ( (#) )

-- monaderror-io -----------------------

import MonadError  ( fromRight )

-- mtl ---------------------------------

import Control.Monad.Except  ( MonadError )

-- more-unicode ------------------------

import Data.MoreUnicode.Either   ( ùîº )
import Data.MoreUnicode.Functor  ( (‚ä≥) )
import Data.MoreUnicode.Text     ( ùïã )

-- parsec-plus -------------------------

import ParsecPlus  ( Parsecable( parser ), eitherParsec )

-- parser-plus -------------------------

import ParserPlus  ( stringMaybeDQuoted )

-- regex-with-pcre ---------------------

import Text.RE.PCRE.Text  ( RE, compileRegex )

-- text --------------------------------

import Data.Text  ( pack, unpack )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import PCRE.Error  ( AsREParseError( _REParseError ), REParseError )

--------------------------------------------------------------------------------

{- | A newtype wrapper for RE to make it `Parsecable`. -}
newtype REParsecable = REParsecable { unREParsecable ‚à∑ RE }

instance Parsecable REParsecable where
  parser =
    REParsecable ‚ä≥ eitherParsec stringMaybeDQuoted (compRE @REParseError ‚àò pack)

------------------------------------------------------------

compRE ‚à∑ ‚àÄ Œµ Œ∑ . (AsREParseError Œµ, MonadError Œµ Œ∑) ‚áí ùïã ‚Üí Œ∑ RE
compRE =
  fromRight ‚àò first (_REParseError #) ‚àò compileRegex @(ùîº REParseError) ‚àò unpack

-- that's all, folks! ----------------------------------------------------------
